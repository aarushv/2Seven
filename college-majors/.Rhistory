ifelse("0" %in% split1, print("Oh no!"), print("Yay!"))
ifelse("1" %in% split1, print("Oh no!"), print("Yay!"))
ifelse("2" %in% split1, print("Oh no!"), print("Yay!"))
ifelse("3" %in% split1, print("Oh no!"), print("Yay!"))
ifelse("4" %in% split1, print("Oh no!"), print("Yay!"))
ifelse("5" %in% split1, print("Oh no!"), print("Yay!"))
ifelse("6" %in% split1, print("Oh no!"), print("Yay!"))
ifelse("7" %in% split1, print("Oh no!"), print("Yay!"))
ifelse("8" %in% split1, print("Oh no!"), print("Yay!"))
ifelse("9" %in% split1, print("Oh no!"), print("Yay!"))
}
}
checkit(a)
checkit(b)
b
checkit <- function(check){
split1 <- strsplit(check, "")
numb <- c("0","1","2","3","4","5","6","7","8","9")
for (i in split1) {
ifelse(numb %in% i, print("Oh no!"), print("Yay!"))
}
}
a
checkit(a)
a
b
c
d
e
checkit(example)
checkit <- function(check){
split1 <- strsplit(check, "")
numb <- c("0","1","2","3","4","5","6","7","8","9")
for (i in split1) {
ifelse(numb %in% i, bad <- TRUE, good <- TRUE)
}
ifelse(bad == TRUE, print("Oh no!"), print("Yay!"))
}
checkit(a)
a
checkit <- function(check){
split1 <- strsplit(check, "")
numb <- c("0","1","2","3","4","5","6","7","8","9")
for (i in split1) {
ifelse(numb %in% i, bad <- TRUE, good <- TRUE)
}
ifelse(bad = TRUE, print("Oh no!"), print("Yay!"))
}
checkit <- function(check){
split1 <- strsplit(check, "")
numb <- c("0","1","2","3","4","5","6","7","8","9")
for (i in split1) {
ifelse(numb %in% i, bad <- TRUE, good <- TRUE)
}
ifelse(bad = TRUE, print("Oh no!"), print("Yay!"))
}
checkit(a)
checkit <- function(check){
split1 <- strsplit(check, "")
numb <- c("0","1","2","3","4","5","6","7","8","9")
for (i in split1) {
ifelse(numb %in% i, bad <- TRUE, good <- TRUE)
}
ifelse(bad == TRUE, print("Oh no!"), print("Yay!"))
}
checkit(a)
a
b
checkit <- function(check){
split1 <- strsplit(check, "")
numb <- c("0","1","2","3","4","5","6","7","8","9")
for (i in split1) {
ifelse(numb %in% i, print("Oh no!"), print("Yay!"))
}
}
checkit(a)
a
example
checkit(example)
checkit(example)
checkit(a)
a
checkit <- function(check){
split1 <- strsplit(check, "")
numb <- c("0","1","2","3","4","5","6","7","8","9")
ifelse(any(numb %in% split1), print("Oh no!"), print("Yay!"))
}
checkit <- function(check){
split1 <- strsplit(check, "")
numb <- c("0","1","2","3","4","5","6","7","8","9")
for (i in split1) {
ifelse(numb %in% i, print("Oh no!"), print("Yay!"))
}
}
checkit1 <- function(check){
split1 <- strsplit(check, "")
numb <- c("0","1","2","3","4","5","6","7","8","9")
ifelse(any(numb %in% split1), print("Oh no!"), print("Yay!"))
}
a
checkit1(a)
d <-strsplit
motherfuckingnumbers <- 0:9
str_detect(a,motherfuckingnumbers)
install.packages("stringr")
str_detect(a,motherfuckingnumbers)
library(stringr)
library(string)
install.packages("stringr")
install.packages("stringr")
str_detect(a,motherfuckingnumbers)
str_detect
library("stringr")
str_detect(a,1:10)
str_detect(a,motherfuckingnumbers)
checkit1 <- function(check){
split1 <- strsplit(check, "")
numb <- c("0","1","2","3","4","5","6","7","8","9")
ifelse(str_detect(split1,numb)==TRUE, print("Oh no!"), print("Yay!"))
}
checkit1(a)
a
checkit1 <- function(check){
numb <- c("0","1","2","3","4","5","6","7","8","9")
ifelse(str_detect(check,numb)==TRUE, print("Oh no!"), print("Yay!"))
}
checkit1(a)
a
checkit(example)
example
checkit(a)
a
checkit1(example)
example
checkit1 <- function(check){
numb <- c("0","1","2","3","4","5","6","7","8","9")
ifelse(str_detect(check,numb)==TRUE, print("Oh no!"), print("Yay!"))
}
checkit1(example)
checkit1(a)
b
c
c <- c("hello 12", "hello", "69 bears")
checkit1(c)
checkit1(a)
checkit(c)
c
checkit1(c)
c
checkit1 <- function(check){
split2 <- strsplit(check,"")
numb <- c("0","1","2","3","4","5","6","7","8","9")
ifelse(str_count(split2,numb)>0,"Oh no!","Yay!")
}
checkit1(a)
library(stringr)
checkit1(a)
a
checkit(c)
c
example
checkit1(c)
c
source('~/Desktop/Class/ch09-dataframes/exercise-1/exercise.R')
seagame
scored <- c(9,12,27,46,16)
scored_against <- c(17,9,33,18,10)
seagame <- data.frame(scored,scoreda)
seagame
seagame$diff <- scored-scored_against
seagame
seagame$won <- diff >0
seagame$won <- diff > 0
seagame
seagame$won <- (diff > 0)
seagame$won <- (scored > scoreda)
seagame
seagame$opponent <- c("Packers","49ers","Titans","Colts","Rams")
seagame
install.packages("nycflights13")
source('~/.active-rstudio-document')
data(flights,package="nycflights13")
head(flights)
tail(flights,2)
exists(dplyr)
select(month, day, origin, destination, carrier, tailnum)
SEAflights <- select(month, day, origin, destination, carrier, tailnum)
install.packages("dyplyr")
install.packages("dplyr")
install.packages("dplyr")
source('~/.active-rstudio-document')
SEAflights <- select(month, day, origin,destination, carrier, tailnum)
unique(nycflights13)
unique(flights)
flights >%>
SEAflights <- select(month, day, origin, destination, tailnum)
flights >%>
select(month, day, origin, destination, tailnum)
flights %>%
select(month,day,origin,destination, tailnum)
flights %>%
select(month,day,origin,dest, tailnum)
flights %>%
select(month,day,origin,dest, tailnum) %>%
filter(dest == "SEA")
flights %>%
select(month,day,origin,dest, tailnum) %>%
filter(dest == "SEA") %>%
flights$date <- c(flights[1],flights[2],2013)
flights %>%
select(month,day,origin,dest, tailnum) %>%
filter(dest == "SEA")
flights$date <- c(flights[1],flights[2],2013)
flights %>%
select(month,day,origin,dest, tailnum) %>%
filter(dest == "SEA") %>%
arrange(dest)
flights %>%
select(month,day,origin,dest, tailnum) %>%
filter(dest == "SEA") %>%
arrange(origin)
flights %>%
select(month,day,origin,dest, tailnum) %>%
filter(dest == "SEA") %>%
mutate(isodate = paste(2013,month,day,sep="-"))
flights %>%
select(month,day,origin,dest,carrier,tailnum) %>%
arrange(dest, carrier)
flights %>%
rename(flights, flights = flights2) %>%
select(month,day,origin,dest,carrier,tailnum) %>%
arrange(dest, carrier) %>%
summarize(n=n())
flights %>%
select(month,day,origin,dest,carrier,tailnum) %>%
arrange(dest, carrier) %>%
summarize(n=n())
##summarizes number of unique flights to Seattle
flights %>% filter(dest = "SEA") <%> summarize(np = tailnum %>% unique() %>% length())
##summarizes number of unique flights to Seattle
flights %>% filter(dest = "SEA") %>% summarize(np = tailnum %>% unique() %>% length())
##summarizes number of unique flights to Seattle
flights %>% filter(dest = "SEA") %>% summarize(np = tailnum %>% unique() %>% length())
##summarizes number of unique flights to Seattle
flights %>% filter(dest = "SEA") %>% summarize(np == tailnum %>% unique() %>% length())
##summarizes number of unique flights to Seattle
flights %>% filter(dest == "SEA") %>% summarize(np = tailnum %>% unique() %>% length())
##Which airplane visited NYC the most
##Takes data, group by airplane ID, count number of them, arrange groups by largest, print
flights %>% group_by(tailnum) %>% count() %>% arrange(desc(n)) %>% head(10)
##Which airplane visited NYC the most
##Takes data, is.na checks for NA(missing) and we filter that out
##group by airplane ID, count number of them, arrange groups by largest, print
flights %>%  filter(!is.na(tailnum)) %>% group_by(tailnum) %>% count() %>% arrange(desc(n)) %>% head(10)
flights
## na.rm = TRUE removes all NA values so we can take averages of values
##Arrival and departure delay by airport
flights %>%
group_by(origin) %>%
summarize(delay_dep = mean(dep_delay, na.rm = TRUE)) %>%
summarize(delay_arr = mean(arr_delay, na.rm = TRUE))
flights
## na.rm = TRUE removes all NA values so we can take averages of values
##Arrival and departure delay by airport
flights %>%
group_by(origin) %>%
summarize(delay_dep = mean(dep_delay, na.rm = TRUE)) %>%
summarize(delay_arr = mean(arr_delay, na.rm = TRUE))
summarize(delay_dep = mean(dep_delay, na.rm = TRUE), adelay = mean(arr_delay, na.rm=TRUE)
## na.rm = TRUE removes all NA values so we can take averages of values
##Arrival and departure delay by airport
flights %>%
## na.rm = TRUE removes all NA values so we can take averages of values
##Arrival and departure delay by airport
flights %>%
group_by(origin) %>%
summarize(delay_dep = mean(dep_delay, na.rm = TRUE), adelay = mean(arr_delay, na.rm=TRUE))
flights
## find most popular airport
flights %>%
select(tailnum,origin,dest) %>%
group_by(tailnum)
## find most popular airport
flights %>%
select(tailnum,origin,dest) %>%
group_by(tailnum) %>%
summarize(mostFlights = max(count(tailnum)))
source('~/OneDrive/info201b/GoodClassExampledplyr.R', echo=TRUE)
## find most popular airport in terms of flying to SEA
flights %>%
filter(dest == "SEA") %>%
group_by(origin) %>%
count()
flights %>%
filter(dest == "SEA", arr_delay >0) %>%
group_by(carrier) %>%
summarized(d = mean(arr_delay, na.rm=TRUE))
source('~/OneDrive/info201b/GoodClassExampledplyr.R', echo=TRUE)
source('~/OneDrive/info201b/GoodClassExampledplyr.R', echo=TRUE)
source('~/OneDrive/info201b/GoodClassExampledplyr.R', echo=TRUE)
source('~/OneDrive/info201b/Lab_Exercises/ch10-dplyr/exercise-4/exercise.R', echo=TRUE)
nycflights13
nycflights13::airlines
nycflights13::flights
flights %>%
mutate(time_gained_air = arr_dely - dep_delay)
flights %>%
mutate(time_gained_air = arr_delay - dep_delay)
flights$time_gained_air
flights %>%
mutate(time_gained_air = arr_delay - dep_delay)
flights %>%
mutate(time_gained_air = arr_delay - dep_delay)
flights %>%
mutate(time_gained_air = (arr_delay - dep_delay))
flights$time_gained_air
# Install the nycflights13 package and read it in.  Require the dplyr package
# install.packages("nycflights13")
library(nycflights13)
library(dplyr)
flights %>%
mutate(time_gained_air = (arr_delay - dep_delay))
flights$time_gained_air
view(flights)
View(flights)
flights %>%
mutate(time_gained_air = arr_delay - dep_delay)
flights$time_gained_air
flights %>%
mutate(time_gained_air = 'arr_delay' - 'dep_delay')
flights %>%
mutate(time_gained_air = arr_delay - dep_delay)
flights <- flights %>%
mutate(time_gained_air = arr_delay - dep_delay)
flights$time_gained_air
flights %>%
desc(time_gained_air)
flights <- flights %>%
mutate(time_gained_air = arr_delay - dep_delay) %>%
desc(time_gained_air)
flights <- flights %>%
mutate(time_gained_air = arr_delay - dep_delay) %>%
arrange(desc(time_gained_air))
flights
View(flights)
hist(time_gained_air)
hist(time_gained_air)
hist(flights)
hist(time_gained_air, plot = TRUE)
hist(flights, plot = TRUE)
hist(flights$time_gained_air, plot = TRUE)
flights_to_SEA <- flights %>%
select(dest == "SEA")
flights_to_SEA <- flights %>%
select(dest = "SEA")
flights_to_SEA <- flights %>%
select(dest == "SEA")
flights_to_SEA <- flights %>%
filter(dest == "SEA")
flights_to_SEA
hist(flights_to_SEA$time_gained_air, plot = TRUE)
print(mean(flights_to_SEA$time_gained_air))
print(mean(flights_to_SEA$time_gained_air, na.rm = TRUE))
install.packages("rgl")
library(rgl)
install.packages("rgl")
name_first_pokemn <- first_pokemon$name
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
response_pik <- GET("https://pokeapi.co/api/v2/pokemon-species/pikachu")
body_pik <- content(response_pik, "text")
pikachu_info <- fromKSON(body_pik)
pikachu_info <- fromJSON(body_pik)
pikcahu_info$ID
pikcahu_info$id
pikachu_info <- fromJSON(body_pik)
pikcahu_info$id
pikachu_info <- fromJSON(body_pik)
pikcahu_info$id
response_pik <- GET("https://pokeapi.co/api/v2/pokemon-species/pikachu")
body_pik <- content(response_pik, "text")
pikachu_info <- fromJSON(body_pik)
pikcahu_info$id
pikachu_id <- pikcahu_info$id
body_pik <- content(response_pik, "text")
pikachu <- fromJSON(body_pik)
pikachu_id <- pikcahu$id
##Prorepublica API Key
republica_key <- J6ZdcfTq3ZDPgsG6PdyZdX7HjTxaqNzD0ez6Mp2l
##Prorepublica API Key
republica_key <- "J6ZdcfTq3ZDPgsG6PdyZdX7HjTxaqNzD0ez6Mp2l"
library(httr)
library(jsonlite)
info_response <- GET("https://www.googleapis.com/civicinfo/v2/representatives?key=<AIzaSyAyG4KpRgR0M5TLDnFROjwGy685FKhUMlU>&address=1263%20Pacific%20Ave.%20Kansas%20City%20KS)
google_base_api <- "https://www.googleapis.com/civicinfo/v2"
info_response <- GET("https://www.googleapis.com/civicinfo/v2/representatives?key=<AIzaSyAyG4KpRgR0M5TLDnFROjwGy685FKhUMlU>&address=1263%20Pacific%20Ave.%20Kansas%20City%20KS")
rep_info <- fromJSON(content(info_response,"test"))
source('~/OneDrive/info201b/a5/a5_workspace_practice.R', echo=TRUE)
rep_info <- content(info_response,"test"))
rep_info <- content(info_response,"test")
print(info_response)
library(jsonlite)
library(httr)
google_base_api <- "https://www.googleapis.com/civicinfo/v2"
info_response <- GET("https://www.googleapis.com/civicinfo/v2/representatives?key=<AIzaSyAyG4KpRgR0M5TLDnFROjwGy685FKhUMlU>&address=1263%20Pacific%20Ave.%20Kansas%20City%20KS")
rep_info <- content(info_response,"test")
library("jsonlite")
library("httr")
google_base_api <- "https://www.googleapis.com/civicinfo/v2"
info_response <- GET("https://www.googleapis.com/civicinfo/v2/representatives?key=<AIzaSyAyG4KpRgR0M5TLDnFROjwGy685FKhUMlU>&address=1263%20Pacific%20Ave.%20Kansas%20City%20KS")
rep_info <- content(info_response,"test")
google_base_api <- "https://www.googleapis.com/civicinfo/v2"
info_response <- GET("https://www.googleapis.com/civicinfo/v2/representatives?key=<AIzaSyAyG4KpRgR0M5TLDnFROjwGy685FKhUMlU>&address=1263%20Pacific%20Ave.%20Kansas%20City%20KS")
print(info_response)
info_response <- GET("https://www.googleapis.com/civicinfo/v2/representatives?key=<AIzaSyBmCswjo5VN_IVwiH31SRR_yBjek8ke2UA>&address=1263%20Pacific%20Ave.%20Kansas%20City%20KS")
print(info_response)
library("jsonlite")
library("httr")
google_base_api <- "https://www.googleapis.com/civicinfo/v2"
info_response <- GET("https://www.googleapis.com/civicinfo/v2/representatives?key=<AIzaSyCOSfWwsAIO3ljEvTSVDcRzlMBIaFa7oA0>&address=1263%20Pacific%20Ave.%20Kansas%20City%20KS")
print(info_response)
info_response <- GET("https://www.googleapis.com/civicinfo/v2/representatives?key=AIzaSyD2jptdl_qMb2-zpyN8X-ppCH36nq72MwA&address=1263%20Pacific%20Ave.%20Kansas%20City%20KS")
print(info_response)
info_response <- GET("https://www.googleapis.com/civicinfo/v2/representatives?key=<AIzaSyD2jptdl_qMb2-zpyN8X-ppCH36nq72MwA>&address=1263%20Pacific%20Ave.%20Kansas%20City%20KS")
print(info_response)
info_response <- GET("https://www.googleapis.com/civicinfo/v2/elections?key=AIzaSyCOSfWwsAIO3ljEvTSVDcRzlMBIaFa7oA0")
print(info_response)
rep_info <- content(info_response,"test")
rep_info <- content(info_response,"text")
rep_info
rep_list  <- fromJSON(rep_info)
rep_list
rep_list$name
View(rep_list)
library(ggplot2)
ggplot(diamonds)
ggplot(diamonds, aes(x=carat,y=price))
ggplot(diamonds, aes(x=carat,y=price + geom_point()))
library(ggplot2)
ggplot(diamonds)
ggplot(diamonds, aes(x=carat,y=price + geom_point()))
ggplot(diamonds, aes(x=carat,y=price, geom_point()))
ggplot(diamonds, aes(x=carat,y=price) + geom_point()
)
ggplot(diamonds, aes(x=carat,y=price)) + geom_point()
ggplot(economics,aes(date,uemped)) +geom_line() +geom_point()
ggplot(diamonds, aes(x=carat,y=price)) + geom_point()+ geom_line()
##US Map
ggplot(map_data("state"),) + geom_map()
install.packages("maps")
food <- GET("https://api.nal.usda.gov/ndb/reports/V2?ndbno=01009&ndbno=45202763&ndbno=35193&type=b&format=xml&api_key=L8DCuxGHiFCiNr8JChoIB1ZB9NZbNbSlIpvpYx0Z)
)
^c
food <- GET("https://api.nal.usda.gov/ndb/reports/V2?ndbno=01009&ndbno=45202763&ndbno=35193&type=b&format=xml&api_key=L8DCuxGHiFCiNr8JChoIB1ZB9NZbNbSlIpvpYx0Z")
library("httr")
food <- GET("https://api.nal.usda.gov/ndb/reports/V2?ndbno=01009&ndbno=45202763&ndbno=35193&type=b&format=xml&api_key=L8DCuxGHiFCiNr8JChoIB1ZB9NZbNbSlIpvpYx0Z")
food_info <- content(food, "text")
source('~/.active-rstudio-document', echo=TRUE)
View(food_list)
food <- GET("https://api.nal.usda.gov/ndb/reports/V2?ndbno=45078606&type=b&format=json&api_key=L8DCuxGHiFCiNr8JChoIB1ZB9NZbNbSlIpvpYx0Z")
food_info <- content(food, "text")
food_list <- fromJSON(food_info)
View(food_list)
source('~/.active-rstudio-document', echo=TRUE)
View(food_list)
food <- GET("https://api.nal.usda.gov/ndb/reports/V2?ndbno=45078606&type=b&format=json&api_key=L8DCuxGHiFCiNr8JChoIB1ZB9NZbNbSlIpvpYx0Z")
View(food)
food <- GET("https://api.nal.usda.gov/ndb/reports/V2?ndbno=010900&type=b&format=json&api_key=L8DCuxGHiFCiNr8JChoIB1ZB9NZbNbSlIpvpYx0Z")
food_info <- content(food, "text")
food_list <- fromJSON(food_info)
View(food_list)
food <- GET("https://api.nal.usda.gov/ndb/reports/V2?ndbno=45078606&type=b&format=json&api_key=L8DCuxGHiFCiNr8JChoIB1ZB9NZbNbSlIpvpYx0Z")
food_info <- content(food, "text")
food_list <- fromJSON(food_info)
View(food_list)
library("httr")
library("jsonlite")
food <- GET("https://api.nal.usda.gov/ndb/reports/V2?ndbno=45078606&type=b&format=json&api_key=L8DCuxGHiFCiNr8JChoIB1ZB9NZbNbSlIpvpYx0Z")
food_info <- content(food, "text")
food_list <- fromJSON(food_info)
View(food_list)
install.packages("shiny")
source('~/GoogleDrive/Sophomore_Year_College/info201b/a8/a8-shiny-loganm123/Shiny/cereal_app.R', echo=TRUE)
runApp('GoogleDrive/Sophomore_Year_College/info201b/a8/a8-shiny-loganm123/Shiny/cereal_app.R')
runApp('GoogleDrive/Sophomore_Year_College/info201b/a8/a8-shiny-loganm123/Shiny/cereal_app.R')
runApp('GoogleDrive/Sophomore_Year_College/info201b/a8/a8-shiny-loganm123/Shiny/cereal_app.R')
runApp('GoogleDrive/Sophomore_Year_College/info201b/a8/a8-shiny-loganm123/Shiny/cereal_app.R')
runApp('GoogleDrive/Sophomore_Year_College/info201b/a8/a8-shiny-loganm123/Shiny/cereal_app.R')
shiny::runApp('GoogleDrive/Sophomore_Year_College/info201b/a8/a8-shiny-loganm123')
runApp('GoogleDrive/Sophomore_Year_College/info201b/a8/a8-shiny-loganm123')
runApp('GoogleDrive/Sophomore_Year_College/info201b/a8/a8-shiny-loganm123')
library("shiny")
library("data.table")
library("ggplot2")
library("shiny")
runApp('GoogleDrive/Sophomore_Year_College/info201b/a8/a8-shiny-loganm123')
library(rsconnect)
rsconnect::deployApp('~/GoogleDrive/Sophomore_Year_College/info201b/a8/a8-shiny-loganm123')
rsconnect::deployApp('~/GoogleDrive/Sophomore_Year_College/info201b/a8/a8-shiny-loganm')
rsconnect::setAccountInfo(name='marekl',
token='B3E3ED7F9777403DE2BDD7C7D0B7F19F',
secret='aoFwkNqN2HvhB0GeFoLzXP06ASyuUeA4KELUxwvC')
rsconnect::deployApp('~/GoogleDrive/Sophomore_Year_College/info201b/a8/a8-shiny-loganm')
runApp('GoogleDrive/Sophomore_Year_College/info201b/a8/a8-shiny-loganm')
source('~/GoogleDrive/Sophomore_Year_College/info201b/Final_Project/College_Majors.R', echo=TRUE)
View(all_ages)
View(recent_grads)
View(grad_students.csv)
grad_students <- fread("grad-students.csv", stringsAsFactors = FALSE)
install.packages("plotly")
install.packages("plotly")
